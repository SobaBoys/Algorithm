const d = [[1,0],[-1,0],[0,1],[0,-1]];

function solution(maps) {
    const q = [[0, 0]];
    const N = maps.length;
    const M = maps[0].length;
    const dist = Array(N).fill().map(() => Array(M).fill(0));
    dist[0][0] = 1;
    
    while (q.length) {
        const cur = q.shift();
        if(cur[0] === N - 1 && cur[1] === M - 1) return dist[cur[0]][cur[1]];
        
        d.forEach((e) => {
            const nx = e[0] + cur[0];
            const ny = e[1] + cur[1];
            
            if(nx >= 0 && ny >= 0 && nx < N && ny < M && maps[nx][ny] === 1 && dist[nx][ny] === 0) {
                q.push([nx, ny]);
                dist[nx][ny] = dist[cur[0]][cur[1]] + 1;
            }
        });
    }
    return -1;
}

// forEach, for-in, while 성능 차이 비교
// http://jsben.ch/BQhED

// forEach로 했을 때
// 정확성 테스트
// 테스트 1 〉	통과 (0.21ms, 33.6MB)
// 테스트 2 〉	통과 (0.32ms, 33.4MB)
// 테스트 3 〉	통과 (0.26ms, 33.6MB)
// 테스트 4 〉	통과 (0.22ms, 33.5MB)
// 테스트 5 〉	통과 (0.22ms, 33.4MB)
// 테스트 6 〉	통과 (0.25ms, 33.5MB)
// 테스트 7 〉	통과 (0.27ms, 33.5MB)
// 테스트 8 〉	통과 (0.23ms, 33.5MB)
// 테스트 9 〉	통과 (0.31ms, 33.5MB)
// 테스트 10 〉	통과 (0.25ms, 33.4MB)
// 테스트 11 〉	통과 (0.21ms, 33.5MB)
// 테스트 12 〉	통과 (0.27ms, 33.4MB)
// 테스트 13 〉	통과 (0.22ms, 33.5MB)
// 테스트 14 〉	통과 (0.22ms, 33.4MB)
// 테스트 15 〉	통과 (0.22ms, 33.4MB)
// 테스트 16 〉	통과 (0.20ms, 33.5MB)
// 테스트 17 〉	통과 (0.26ms, 33.4MB)
// 테스트 18 〉	통과 (0.13ms, 33.5MB)
// 테스트 19 〉	통과 (0.15ms, 33.5MB)
// 테스트 20 〉	통과 (0.15ms, 33.6MB)
// 테스트 21 〉	통과 (0.16ms, 33.4MB)

// 효율성  테스트
// 테스트 1 〉	통과 (30.11ms, 37.4MB)
// 테스트 2 〉	통과 (4.04ms, 37.3MB)
// 테스트 3 〉	통과 (5.78ms, 37.9MB)
// 테스트 4 〉	통과 (4.75ms, 37.6MB)
// ---------------------------------
// for-of로 했을 때
// 정확성  테스트
// 테스트 1 〉	통과 (0.25ms, 33.6MB)
// 테스트 2 〉	통과 (0.24ms, 33.4MB)
// 테스트 3 〉	통과 (0.28ms, 33.5MB)
// 테스트 4 〉	통과 (0.27ms, 33.5MB)
// 테스트 5 〉	통과 (0.26ms, 33.6MB)
// 테스트 6 〉	통과 (0.30ms, 33.6MB)
// 테스트 7 〉	통과 (0.32ms, 33.5MB)
// 테스트 8 〉	통과 (0.26ms, 33.5MB)
// 테스트 9 〉	통과 (0.43ms, 33.4MB)
// 테스트 10 〉	통과 (0.31ms, 33.4MB)
// 테스트 11 〉	통과 (0.26ms, 33.5MB)
// 테스트 12 〉	통과 (0.32ms, 33.5MB)
// 테스트 13 〉	통과 (0.27ms, 33.5MB)
// 테스트 14 〉	통과 (0.46ms, 33.6MB)
// 테스트 15 〉	통과 (0.29ms, 33.5MB)
// 테스트 16 〉	통과 (0.27ms, 33.5MB)
// 테스트 17 〉	통과 (0.54ms, 33.5MB)
// 테스트 18 〉	통과 (0.11ms, 33.4MB)
// 테스트 19 〉	통과 (0.10ms, 33.6MB)
// 테스트 20 〉	통과 (0.16ms, 33.5MB)
// 테스트 21 〉	통과 (0.11ms, 33.5MB)
// 효율성  테스트
// 테스트 1 〉	통과 (20.66ms, 38.8MB)
// 테스트 2 〉	통과 (10.85ms, 38.4MB)
// 테스트 3 〉	통과 (20.17ms, 38.8MB)
// 테스트 4 〉	통과 (12.34ms, 38.9MB)